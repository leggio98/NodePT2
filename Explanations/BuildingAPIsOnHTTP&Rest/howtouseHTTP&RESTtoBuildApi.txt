how  to use HTTP & REST to build an api
HTTP stands for hypertext transfer protocol (s, secure)
PROTOCOLS, are an agreed-upom ways of sending back messages back and forth between two or more entities
http specification  defines the protocol in a number of differet documents
these are then implemented by the clients and servers
this is known as the client server model


                     client(smartphone)
                                    \--------  internet <------------> server
                                                  |
               client (PC)<-----------------------|

there are clients, like users with their pc or phones, that needs servers, and communicate each others throuh the net

http acts as a request response protocol in this client server model so let's take a look at an example

we have a http client which is making a http request to a http server which gives a response to the http client

                                                 HTTP
                                       |--------------------|
                                       |        request     |
                        |--------------/                    \-------------|
                        |                                                 âˆ¨
                       HTTP                                              HTTP
                      client                                            server
                   (Web Browser)                                       (Node.js
                        ^                                             Application)
                        |                                            /
                         \                        HTTP              /
                          \----------------------------------------/
                                                Response
We ve already  seen an http client request, like curl.
another example of an http client is postman api client, that acess http client making requests to servers which then
send back http response messages as replies and then display the results to us in postman

http clients could even be scripts written e.g. in js or python, ruby, or any
also then make http requests to a server which can then send back that data as an http response message back to our client
and then we can pass that data that's returned and actually output it

http is a very powerful protocol
http messages

HTTP REQUEST MESSAGES
are split down in threee different parts

POST /planets HTTP/1.1
Host: localhost:3000
User-Agent: curl/7.68.0
Accept: */*
Content-Type: Application/json
Content-Length: 39
{"id":1, "name":"Mercury", "diameter":1234}0


there's that top line there which is the request line,
the request header field is below it
and sometimes a message body

the request line is split into three parts:

 -request method, POST, which indicates the type of action
 that should be performed on the results b the server
 some methods are for retrieving  data, and others are for changing data
 there are nine request methods in total and we'll look at some of them later

 -request url, /planets, which tells the server the url of the results we want to acess

 -protocol version, HTTP/1.1,

 below the request line we have the request header fields that provide extra data and infos to the server about the request
 we can see they are formatted as
 key value pairs: so on the left we have the field name, then a colon, then the field value

 after that there is an empty line
 and then optionally there's a message body, that is sending some data then along with the request
 in this case we can see it is a json string

HTTP RESPONSE MESSAGES

HTTP/1.1 201 Created
Content-Type: Application/json
Content-Length:41
Date: Sat, 11 Jun 2000 18.08.17 GMT
{"id":1, "name":"Mercury", "diameter":1234}
similarly structured, but first line is the
STATUS LINE, split into three parts:
-HTTP PROTOCOL VERSION, HTTP/1.1,
-RESPONSE STATUS CODE, 201, indicates the result of the server attempting to handle that clients request
-REASON PHRASE,which wxplains the reason for the status CODE

below we have the HEADER FIELDS, that provide extra data and infos to the server about the request
 we can see they are formatted as
 key value pairs: so on the left we have the field name, then a colon, then the field value
THEN AN EMPTY LINE followed by
response body, message body formatted as a json string in this case

in node.js we have a
CORE HTTP MODULE
and we can use this to create http clients and http servers
node.js web frameworks actually build on top of the http module, like express, fastify, nestjs
we can use these web frameworks to build APIs

WEB APIs
web apis use http and they allow us to query a server to a specific set of data
the client sends an http request to the server and the server tipically send a response message in json formatted

REST(representational state transfer) ARCHITECTUREAL STYLE
is a style can be used as guidelines for creating websites apis
it was defined in 2000 by ROY FIELDING
in bhis doctoral dissertation
it stands for represantational state transfer
it is talking about transferring  the state of a result beteween client and server

there are six guiding constrains for rest:

REST ARCHITECTURAL CONSTRAINS:
-client/server architecture
-Statelessness
-Cacheability
-Layered system
-(optional) Code on demand
-Uniform interface

Systems that comly at least partiallly with these constrains referred to as being restful

the uniform interface is a fundamental constrain for restful apisare some specific ways that we
can create a uniform interface

firstly we can identufy resources with urls
So if we e.g. had a Planet resource

Resource: Planet

we can actually represent it using urls

so if we had a collection of planet resources, so multiple planets we want to return back from a pi
we could have a slash planet endpoint
if we had /planets/7 we can see the 7 as a specific id for a specific planet

/planets - a collection of planet resources

/planets/7 - an individuakl pkanet resource


HTTP methods
can also help us building an uniform interfacethey have specific meanings or semantics
and there are four that will commonlhy use when building rest apis


-GET, gets a representation of a resource's state. So that's the state being in the data that's contained
      in that particular resource

-POST, creates a new Resource. So we say for example we wanted to create a new planet we'd make a post request

-PUT, is a method we using for replacing a resource with an updated representation. So, if some
    fields are changed and we want to update that data that the server is storing about that resource we'd
    use a PUT request

-DELETE, is a method that deletes a resource.

THE SPACE FACTS API DESING





