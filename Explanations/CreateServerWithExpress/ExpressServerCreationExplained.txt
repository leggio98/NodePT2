To create a server with wxpress we need to install it

$ npm install express

we are going to installe type for express so

$ npm install --save-dev @types/express

an another package we have to install is ExpressJS Async Errors

it is important bcause provides safety in using promises, async/await
$ npm install express-async-errors


let's initialize, defining our first root: in express

it means app.get, which is the method to call a request
encoding "/" passing then a callback function, and it is a root handler
passing request and response, this function will run a requestwhich comes in for slash root
on our api using get http method

we are sending back the response, sending message "up and running

defining a variable which is the port, we can define where our server gonna run
adding a listen() we can link our port to make the app.listen to the port we set

RUN A SERVER IN DEVELOPMENT
We know we can run our server with
node dist/server.js
and opening a splitted terminal we can make a request interrogating it with
curl localhost:3000 -v
getting back the message we set on the root path with



app.get("/", (request, response) => {
    response.send("This is the Space Facts API!");
});


changing the message and saving it, we will still have the first message in our terminalbecause of
when node.js starts up it loads in the js code and it ndoesnt know how to automatically reload
that, that's just not how node korks

when we make changes we need to automatically recompile our ts code and restart our js process
running at our js code

to do that

we need to stop our server
and we need to run build again
and then we will run our server with node dist/server.js

to automate these steps we need to
open up our package.json
and add a new build dev script
moving the build script down to the bottom of its object
and add a "build:dev" script with a "tsc --watch" option in it

so let's close our terminals, opening a new one running our new script

so now if we make changes tsc is watching but we almost need to automatically restart our code to be updated everytime we make changes

to do that

we need to create a start script
so this one will be running the node server passing through enabling source maps
so that node.js can use it and correctly understand where our code is running
or where it came from the original typescript wit

"script": "node --enable-source-maps dist/server.js"

so this is our starting server script

now we will stop ts compiler
and starting it, it will not automatically do that

to automatically restart it we need to use nodemon
installing it as a devdep with
npm i --save-dev nodemon
to use it we're going to create a new runscript which has to run nodemon watching dist directory
"start:dev " : "nodemon --watch dist/"
we need to install an another package called concurrently
allows us to run more commands at the same time

so

npm install --save-dev concurrently

once we installed it lets create another script
called dev, which will say npm run build && concurrently 'npm:build:dev' 'npm:start:dev'

so let's try it typing

     npm run dev

we'll se anything running and we can see that when the output comes out from
those commands these runscripts

ADD A NEW ROUTE

 let's run npm run dev

 to make oure app testable we need to split things out a bit
 so currently it is everything in a server.ts file,
 let's create a new file in our src folder calld app.ts
 and from server.ts we gonna take out everything we have in here
 apart from the listening code

 so we cut
 `import express from "express";
import "express-async-errors";

const app = express();

app.get("/", (request, response) => {
    response.send("This is the Space Facts APi, by Andrea Barberio!");
});
`
pasting it into app.ts
when we made this we gonna make sure to export defaultly our app with export default app in app.ts
so that app instance declared in const app = express()
we're exporting that from this file
and by doing it we are going into sever.ts
and import that app from ./app  so let's test it splitting the terminal asking for curl verbose request

for now we can stop and save changes adding and committing

to test we need to use supertest so lets npm install supertest as a devdep so adding --save-dev

after that we can import it in our server.test.ts and importing app too,
declaring a request for app to be tested by supertest

now let's create a test for a new root in server.test.ts
which accept the metod request and the root path as first parameter as string
and as a second parameter an async function that is gonna test the async request awaiting it
adding a .get(wit the root point we wanna test )

we gonna expect it returns 200 http status code
we gonna expect it returns "Content-Type",
and check for /application\/json/
with a specific kind of pattern that allows us not to specify
the whole value of the content type response header Ã¹
a REGULAR EXPRESSION pattern WHICH ALLOW US TO FIND A MATCH AND WXPECT ANY STRING THAT CONTAINS THAT VALUE
we can even say we expect the body response to be an object with certain values like


SPLIT
we can splitt the test in app.ts, to do that we need to change the path in app from / to /planets
we're gonna replace response.send with response.json
which is proveded by express

then gonna copy the objet expected in response.ody from server.test.ts
and paste it into response.json

npow if we run our test everything will past

CONFIGURE app
Environment variables are named values
that can be used to affect the way  a pc process runs

if we, in our terminal, type env (environment abbreviation)
we'll get a list of all the environment variables that exist in our shell env
these all different key and values as a name somth can be used and picked ip
by our pc to change the way they behave
now we can acces to these in node js
if we go and run

npm run dev
to start up our server and take a look at server.ts at how to call environment
at the end of our file we put a log  wit process.env
if we save those changes we gonna log it in our terminal dev area
we can configure our app because we now have the access to it

let's undo the log
stop the server and create an .env file which is conventional way in developmente to configure apps
and in that .env file we gonna write PORT= 3000 which port is the variable name and <3000> is the value of PORT
TO READ THIS FILE WE NEED A PACKAGE CALLED DOTENV

IT CAN READ IN the .env file in development and it make them available
in that process.env object we just saw

so
npm install dotenv

now we can actually start up our server
in our server.ts we need to import dotenv/config
that whould automatically go ahead and read the file

what we can do is going to change our server.ts
 code in the port and specify ITwe have even to update start:dev script whic needs to --watch .env too
if we now save, stop the server and start up the server again, maybe changing the port in .env it will be listening on the specified one

so lets add . and commit :D



